"""
제네레이터란?
    - 루프의 반복(Iteration) 동작을 제어할 수 있는 루틴 형태
    - 제네레이터의 장점
    1. 필요한 숫자만큼의 데이터를 보관하기 위해 메모리를 사용할 필요가 없다.
    2. 루틴에 따라 필요하면 즉시 계산하여 메모리에 추가하여 불러올 수 있다.
    - yield 구문을 사용하여 함수를 종료하지 않고 제네레이터를 리턴할 수 있다.
    - 리턴값은 제네레이터 객체이므로 값을 생성하기 위해 next() 함수를 사용한다.
"""


def get_natural_number():
    n = 0
    while True:
        n += 1
        yield n


g = get_natural_number()

# 제네레이터 객체 출력
print("객체를 출력한다.", g)

# 값 생성
for _ in range(0, 100):
    print(next(g))
